version: '3.8'

services:
  postgres-order:
    image: postgres:16
    container_name: postgres_order
    restart: unless-stopped
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres_order_data:/data/postgres
    ports:
      - "5431:5432"
    command: ["postgres", "-c", "port=5432"]

  postgres-inventory:
    image: postgres:16
    container_name: inventory_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres_inventory_data:/data/postgres
    ports:
      - "5435:5432"

  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ms_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://ms_kafka:9093,PLAINTEXT_EXTERNAL://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:9093,PLAINTEXT_EXTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"

  discovery-server:
    image: affan341/discovery-server:latest
    container_name: discovery-server
    restart: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: affan341/apigateway-jib:latest
    container_name: api-gateway
    restart: always
    ports:
      - "8181:8888"
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - discovery-server
      - zipkin

  product-service:
    image: affan341/product-service:latest
    container_name: product-service
    restart: always
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_DATASOURCE_URL=mongodb://mongodb:27017/product-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - mongodb
      - discovery-server
      - zipkin
      - api-gateway

  order-service:
    image: affan341/order-service:latest
    container_name: order-service
    restart: always
    environment:
      - SPRING_APPLICATION_NAME=order-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SERVER_PORT=8081
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC=notificationTopic
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=event:com.ms.order_service.event.OrderPlacedEvent
    depends_on:
      - postgres-order
      - discovery-server
      - kafka
      - zipkin
      - api-gateway

  inventory-service:
    image: affan341/inventory-service:latest
    container_name: inventory-service
    restart: always
    environment:
      - SPRING_APPLICATION_NAME=inventory-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5435/inventory-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SERVER_PORT=8082
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - postgres-inventory
      - discovery-server
      - zipkin
      - api-gateway

  notification-service:
    image: affan341/notification-service:latest
    container_name: notification-service
    restart: always
    environment:
      - SPRING_APPLICATION_NAME=notification-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - SERVER_PORT=8090
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=event:com.ms.notificationService.event.OrderPlacedEvent
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES=*
      - SPRING_KAFKA_CONSUMER_GROUP_ID=notificationId
    depends_on:
      - kafka
      - discovery-server
      - zipkin
      - api-gateway

volumes:
  postgres_order_data:
  postgres_inventory_data:
  mongo_data:
#networks:
#  microservices-network:
#    external: true
